name: builder-ci

on:
  push:
    tags:
      - 'v*'

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm32v7, arm64, amd64]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Check if architecture exists
        id: arch_check
        run: |
          (test -f Dockerfile.${{ matrix.architecture }} && echo ::set-output name=check::passed) || echo ::set-output name=check::failed
      -
        name: Set up QEMU
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Preparation Stage
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        id: prep
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
          echo ::set-output name=outtag::${{ secrets.DOCKER_USERNAME }}/rutorrent:${GITHUB_SHA:0:7}-${{ matrix.architecture }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Build and push
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./Dockerfile.${{ matrix.architecture }}
          push: true
          tags: |
            ${{ steps.prep.outputs.outtag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
      -
        name: Create manifests
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=docker.io/${{ secrets.DOCKER_USERNAME }}/rutorrent
          TAG=${{ steps.prep.outputs.tag }}
          SOURCE=${IMAGE}
          [[ -f Dockerfile.amd64 ]]  && AMD64=${SOURCE}-amd64
          [[ -f Dockerfile.arm64v8 ]]  && ARM64=${SOURCE}-arm64
          [[ -f Dockerfile.arm32v7 ]]  && ARMV7=${SOURCE}-arm32v7
          docker manifest create ${IMAGE}:${TAG} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:latest
